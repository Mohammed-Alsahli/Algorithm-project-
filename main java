package Alg;
import java.util.*;
class Project {

    public static void main(String[] args)

    {
        int[][] grid = { {32, 101, 66, 13, 19}, { 11, 14, 48, 158, 7}, {101, 114, 175, 12, 34 }, {89, 125, 30, 21, 141 },{ 100, 33, 112, 42, 26}};

        System.out.println(shortestPath(grid, row, column));
    }

    static int[] nr = { -1, 0, 1, 0 };
    static int[] nc = { 0, 1, 0, -1 };
    static int row = 5;
    static int column = 5;
    static class Cell
    {
        int x;
        int y;
        int distance;

        Cell(int x, int y, int distance)
        {
            this.x = x;
            this.y = y;
            this.distance = distance;
        }
    }

    static class Compare
            implements Comparator<Cell>
    {
        public int compare(Cell a, Cell b)
        {
            if (a.distance < b.distance)
            {
                return -1;
            }
            else if (a.distance > b.distance)
            {
                return 1;
            }
            else {return 0;}
        }
    }

    static boolean isInsideGrid(int i, int j)
    {
        return (i >= 0 && i < row && j >= 0 && j < column);
    }

    static int shortestPath(int[][] grid, int row, int col)
    {
        int[][] dist = new int[row][col];

        for(int i = 0; i < row; i++)
        {
            for(int j = 0; j < col; j++)
            {
                dist[i][j] = Integer.MAX_VALUE;
            }
        }

        dist[0][0] = grid[0][0];

        PriorityQueue<Cell> pq = new PriorityQueue<Cell>(row * col, new Compare());

        pq.add(new Cell(0, 0, dist[0][0]));
        while (!pq.isEmpty())
        {
            Cell curr = pq.poll();
            for(int i = 0; i < 4; i++)
            {
                int rows = curr.x + nr[i];
                int cols = curr.y + nc[i];

                if (isInsideGrid(rows, cols))
                {
                    if (dist[rows][cols] > dist[curr.x][curr.y] + grid[rows][cols])
                    {

                        if (dist[rows][cols] != Integer.MAX_VALUE)
                        {
                            Cell adj = new Cell(rows, cols, dist[rows][cols]);
                            pq.remove(adj);
                        }

                        dist[rows][cols] = dist[curr.x][curr.y] + grid[rows][cols];

                        pq.add(new Cell(rows, cols, dist[rows][cols]));
                    }
                }
            }
        }
        return dist[row - 1][col - 1];
    }
}
